package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event WrappedInteger {
	integer i;
	
	action increment() {
		i := i + 1;
	}
	
	action decrement() {
		i := i - 1;
	}
	
	action isZero() returns boolean {
		return i = 0;
	}
	
	action equals(integer j) returns boolean {
		return i = j;
	}
}

event WrappedAny {
	any value;
}

event ChainProcessor {
	sequence<IObservable> chain;
	
	static action create(sequence<IObservable> chain) returns ChainProcessor {
		return ChainProcessor(chain);
	}
	
	action sendValue(any value) {
		
	}
	
	action sendError(Exception e, any value) {
		
	}
	
	action sendCompleted() {
		
	}
}

event OfConnectionHandler {
	any values;
	static action create(any values) returns action<IObservable, sequence<IObservable> > {
		return OfConnectionHandler(values).onConnection;
	}
	
	action onConnection(IObservable source, sequence<IObservable> channel) {
		for
	}
}

event Observable {
	integer id;
	
	optional<IObservable> parent;
	dictionary<integer, IObservable> subscribers;
	
	sequence<sequence<IObservable> > connectedObservableChains;
	
	sequence<action<IObservable, sequence<IObservable> > > chainAddedCallbacks;
	
	action<any, > process;
	
	static action create() returns IObservable {
		Observable o := new Observable;
		o.id := integer.getUnique();
		return o.asIObservable();
	}
	
	static action of(any value) returns IObservable {
		IObservable i := create();
		Observable o := <Observable>create().observable;
		o.chainAddedCallbacks.append()
		return i;
	}
	
	action subscribeObserver(IObservable observer) {
		observer.setParent(self.asIObservable());
		self.addSubscriber(observer);
	}
	
	action connect() {
		sequence<IObservable> observableChain := new sequence<IObservable>;
		IObservable current := self.asIObservable();
		while current.hasParent() {
			observableChain.insert(current, 0);
			current := current.getParent();
		}
		current.addConnectedObservableChain(observableChain);
	}
	
	action addConnectedObservableChain(sequence<IObservable> observableChain) {
		connectedObservableChains.append(observableChain);
		action<IObservable, sequence<IObservable> > callback;
		for callback in chainAddedCallbacks {
			callback(self.asIObservable(), observableChain);
		}
	}
	
	action addSubscriber(IObservable subscriber) {
		subscribers.add(subscriber.getId(), subscriber);
	}
	
	action getParent() returns IObservable {
		return parent.getOrThrow();
	}

	action hasParent() returns boolean {
		return not parent.empty();
	}
	
	action setParent(IObservable parent) {
		parent := parent;
	}
	
	action asIObservable() returns IObservable {
		// TODO: stubbed
		return new IObservable;
	}
}