package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event OnPull {
	action<> onPull;
	
	static action create() returns OnPull {
		return new OnPull;
	}
	
	static action createWithValue(action<> onPull) returns OnPull {
		return OnPull(onPull);
	}
	
	action set(action<> onPull) {
		self.onPull := onPull;
	}
	
	action pull() {
		onPull();
	}
}

event Subscriber {
	integer id;
	
	action<any> next;
	action<any> error;
	action<> complete;
	
	OnPull _onPull;
	boolean _isPulling;
	
	sequence<action<> > _onUnsubscribeListeners;
	
	action _onUnsubscribe(action<> onUnsubscribe) {
		_onUnsubscribeListeners.append(onUnsubscribe);
	}
	
	static action create() returns Subscriber {
		Subscriber s := new Subscriber;
		s.id := integer.getUnique();
		s.error := defaultError;
		return s;
	}
	
	action copy() returns Subscriber {
		Subscriber s := Subscriber.create().onNext(self.next).onError(self.error).onComplete(self.complete);
		s._onPull := _onPull;
		s._isPulling := _isPulling;
		return s;
	}
	
	action onNext(action<any> next) returns Subscriber {
		self.next := next;
		return self;
	}
	
	action onError(action<any> error) returns Subscriber {
		self.error := error;
		return self;
	}
	
	action onComplete(action<> complete) returns Subscriber {
		self.complete := complete;
		return self;
	}
	
	action _pull() {
		_onPull.pull();
	}
	
	static action defaultError(any e) {
		switch(e) {
			case Exception: {
				throw e;
			}
			default: {
				throw Exception(e.valueToString(), "ObservableError");
			}
		}
	}
}