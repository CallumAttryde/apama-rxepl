package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event TakeLastOnPull {
	Subscriber subscriber;
	sequence<any> values;
	integer i;
	action<> pullFromUpstream;
	action<> onComplete;
	boolean isFirstPull;
	
	static action create(sequence<any> values, Subscriber subscriber, action<> pullFromUpstream, action<> onComplete) returns action<> {
		return TakeLastOnPull(subscriber, values, 0, pullFromUpstream, onComplete, true).onPull;
	}
	
	action onPull() {
		// Wait until we get the first pull from downstream to pull from the upstream
		if isFirstPull {
			isFirstPull := false;
			pullFromUpstream();
		} else {
			if i < values.size() {
				i := i + 1;
				subscriber.next(values[i-1]);
			} else {
				subscriber.complete();
				onComplete();
			}
		}
	}
}


event TakeLastSubscriber {
	Subscriber downstreamSubscriber;
	integer count;
	sequence<any> values;
	action<> pullFromUpstream;
	boolean isComplete;
	
	static action create(Subscriber downstreamSubscriber, integer count) returns Subscriber {
		TakeLastSubscriber m := TakeLastSubscriber(downstreamSubscriber, count, new sequence<any>, new action<>, false);
		Subscriber upstreamSubscriber := downstreamSubscriber.copy().onNext(m.next).onComplete(m.complete);
		
		// If the doenstream subscriber is a pulling subscriber then we're also a pulling subscriber
		if downstreamSubscriber._isPulling {
			downstreamSubscriber._onPull.set(TakeLastOnPull.create(m.values, downstreamSubscriber, upstreamSubscriber._pull, m.teardown));
			upstreamSubscriber._onPull := OnPull.create();
			m.pullFromUpstream := LimitSyncInvoke.create(GlobalConstants.MAX_SYNC_VALUES, upstreamSubscriber._pull).invoke;
		}
		return upstreamSubscriber;
	}
	
	action next(any value) {
		if not isComplete {
			values.append(value);
			if values.size() > count {
				values.remove(0);
			}
			
			ifpresent pullFromUpstream {
				pullFromUpstream();
			}
		}
	}
	
	action error(any e) {
		if not isComplete {
			downstreamSubscriber.error(e);
		}
	}
	
	action complete() {
		if not isComplete {
			isComplete := true;
			if downstreamSubscriber._isPulling {
				// We can just pull as though we're the downstream to trigger the TakeLastOnPull,
				// the downstream must have pulled by this point otherwise we wouldn't have received a complete
				downstreamSubscriber._pull();
			} else {
				any value;
				for value in values {
					downstreamSubscriber.next(value);
				}
				downstreamSubscriber.complete();
				teardown();
			}
		}
	}
	
	action teardown() {
		downstreamSubscriber := new Subscriber;
		pullFromUpstream := new action<>;
		values := new sequence<any>;
	}
}

event TakeLastOnConnection {
	action<Subscriber> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<Subscriber> returns ISubscription parentOnConnection, integer count) returns action<Subscriber> returns ISubscription {
		return TakeLastOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		Subscriber takeLastSubscriber := TakeLastSubscriber.create(subscriber, count);
		return parentOnConnection(takeLastSubscriber);
	}
}