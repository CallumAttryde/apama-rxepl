package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event SubscriberAndSubscription {
	Subscriber subscriber;
	Subscription subscription;
}

event PublishSubscriber {
	dictionary<integer, SubscriberAndSubscription> subscribers;
	action<> pull;
	
	static action create(dictionary<integer, SubscriberAndSubscription> subscribers, boolean cold) returns Subscriber {
		PublishSubscriber p := PublishSubscriber(subscribers, new action<>);
		Subscriber s := Subscriber.create().onNext(p.next).onError(p.error).onComplete(p.complete);
		if cold {
			s._isPulling := true;
			p.pull := LimitSyncInvoke.create(GlobalConstants.MAX_SYNC_VALUES, s._pull).invoke;
		}
		return s;
	}
	
	action next(any value) {
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscriber.next(value);
		}
		ifpresent pull {
			pull();
		}
	}
	
	action error(any e) {
		SubscriberAndSubscription ss;
		for ss in subscribers.values(){
			ss.subscriber.error(e);
		}		
	}
	
	action complete() {
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscriber.complete();
		}
	}
}

event PublishOnDisconnection {
	dictionary<integer, SubscriberAndSubscription> subscribers;
	integer subscriberId;
	
	static action create(dictionary<integer, SubscriberAndSubscription> subscribers, integer subscriberId) returns action<> {
		return PublishOnDisconnection(subscribers, subscriberId).onDisconnect;
	}
	
	action onDisconnect() {
		// Subscribers might already have been removed. 
		// Specifically if it is refCounted and we receive a complete because reset is called twice:
		// once by the auto-completing subscriber
		// once by the refCounter triggered by the auto-completing subscriber
		if subscribers.hasKey(subscriberId) {
			subscribers.remove(subscriberId);
		}
	}
}

event PublishHandler {
	action<Subscriber> returns ISubscription parentOnConnection;
	dictionary<integer, SubscriberAndSubscription> subscribers;
	optional<ISubscription> subscription;
	Subscriber publishSubscriber;
	boolean isComplete;
	boolean cold;
	
	static action create(action<Subscriber> returns ISubscription parentOnConnection, boolean cold) returns PublishHandler {
		return PublishHandler(parentOnConnection, new dictionary<integer, SubscriberAndSubscription>, new optional<ISubscription>, new Subscriber, false, cold);
	}
	
	action connect() returns IDisposable {
		if not isComplete {
			// If there haven't been any previous subscribers then create a subscription
			if subscription.empty() {
				publishSubscriber := PublishSubscriber.create(subscribers, cold);
				subscription := parentOnConnection(publishSubscriber);
				if cold {
					publishSubscriber._pull();
				}
			}
		} else {
			// If there haven't been any previous subscribers then create a subscription
			if subscription.empty() {
				publishSubscriber := PublishSubscriber.create(subscribers, cold);
				publishSubscriber.complete();
			}
		}
		return Disposable.create(reset).asIDisposable();
	}
	
	action reset() {
		ifpresent subscription {
			subscription.unsubscribe();
		}
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscription.unsubscribe();
		}
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		Subscription s := Subscription.create(subscriber._onUnsubscribeListeners);
		SubscriberAndSubscription ss := SubscriberAndSubscription(subscriber, s);
		subscribers.add(subscriber.id, ss);
		s.add(PublishOnDisconnection.create(subscribers, subscriber.id));
		return s.asISubscription();
	}
}
