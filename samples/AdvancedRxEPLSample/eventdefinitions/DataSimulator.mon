//*****************************************************************************
// Title:         Basic ReactiveX for EPL Sample
// Description:   This sample demonstrates how some of the features of the 
//                ReactiveX for EPL are used.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

package com.industry.rxepl.sample;

/** This event is generated by the Data Simulator for the sample */
event Data {
	integer sourceId;
	decimal dValue;
}

/** The Data Simulator monitor generates new values that are used  
 *  in the sample. */
event DataSimulator {
	// Constant that defines the frequency that data is generated  
	constant float   CONST_DATA_FREQ    := 1.0;
	// Constant that defines the maximum difference/step in each update generated  
	constant decimal CONST_STEP_SIZE    := 3.0d;
	// Constant that defines the lowest value that will be generated  
	constant decimal CONST_RANGE_LOWER  := 77.0d;
	// Constant that defines the highest value that will be generated  
	constant decimal CONST_RANGE_UPPER  := 110.0d;
	
	// Listener for stopping the Data Simulator
	listener l;

	// This action starts the set of Data Simulator
	action start( string channelName, integer numSources ) {
		integer sourceId := 0;
		while sourceId < numSources {
			sourceId := sourceId + 1;
			startSingleSimulator( channelName, sourceId );
		}
	}
	
	// This action starts a single instance of the Data Simulator
	action startSingleSimulator( string channelName, integer sourceId ) {
		log "Started Data Simulator: sourceId="+sourceId.toString() at INFO;
		
		// Start the data simulation somewhere between the upper and lower values
		Data currData := new Data;
		currData.dValue   := (CONST_RANGE_UPPER + CONST_RANGE_LOWER) / 2.0d;
		currData.sourceId := sourceId;
		
		l := on all wait( CONST_DATA_FREQ ) {
		
			decimal deltaValue := CONST_STEP_SIZE.rand() - CONST_STEP_SIZE.rand();
			// Make sure values are within range, otherwise invert
			// the delta to be applied
			if( ( ( currData.dValue + deltaValue ) > CONST_RANGE_UPPER ) 
			or  ( ( currData.dValue + deltaValue ) < CONST_RANGE_LOWER ) ) then {
				deltaValue := deltaValue * -1.0d;
			} 
		
			// Adjust the current value with the new delta
			currData.dValue := currData.dValue + deltaValue;
			
			// Send the simulated value to the channel
			send currData to channelName;
		}
	}
	
	// This action stops the Data Simulator
	action stop() {
		log "Stopping Data Simulator" at INFO;
		l.quit();
	}
}
