package com.industry.rx_epl;

event IObservable {
	any observable;

	action<IObserver> returns ISubscription connectObserver;
	action<Subscriber> returns ISubscription subscribe;
	action<action<any> returns any> returns IObservable map;
	action<> returns IObservable publish;
	action<> returns IDisposable connect;
	action<> returns IObservable refCount;
	action<> returns IObservable share;	
	action<integer> returns IObservable take;
	action<integer> returns IObservable takeLast;
	action<> returns IObservable first;
	action<> returns IObservable last;
	action<integer> returns IObservable skip;
	action<integer> returns IObservable skipLast;
	action<action<any> returns boolean> returns IObservable filter;
	action<action<any, any> returns any> returns IObservable scan;
	action<action<any, any> returns any, any> returns IObservable scanWithInitial;
	action<> returns IObservable distinct;
	action<action<any> returns any> returns IObservable distinctBy;
	action<sequence<IObservable>, action<sequence<any> > returns any> returns IObservable combineLatest;
	action<sequence<IObservable>, action<sequence<any> > returns any> returns IObservable withLatestFrom;
	action<float> returns IObservable delay;
	action<> returns IObservable async;
	action<Subscriber> returns IObservable do;
	action<integer> returns IObservable publishReplay;
	action<integer> returns IObservable shareReplay;
	action<IObservable> returns IObservable takeUntil;
	action<integer> returns IObservable repeat;
}
