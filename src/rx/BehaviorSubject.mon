package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event BehaviorSubjectHandler {
	dictionary<integer, Subscriber> subscribers;
	optional<ISubscription> subscription;
	boolean isComplete;
	any currentValue;
	
	static action create(any initialValue) returns BehaviorSubjectHandler {
		return BehaviorSubjectHandler(new dictionary<integer, Subscriber>, new optional<ISubscription>, false, initialValue);
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		if not isComplete {
			subscribers.add(subscriber.id, subscriber);
			Subscription s := Subscription.create(subscriber._onUnsubscribeListeners);
			s.add(SubjectOnDisconnection.create(subscribers, subscriber.id));
			subscriber.next(currentValue);
			return s.asISubscription();
		} else {
			subscriber.complete();
			return Subscription.create(subscriber._onUnsubscribeListeners).asISubscription();
		}
	}
	
	action next(any value) {
		currentValue := value;
		Subscriber s;
		for s in subscribers.values() {
			s.next(value);
		}
	}
	
	action error(any e) {
		Subscriber s;
		for s in subscribers.values(){
			s.error(e);
		}		
	}
	
	action complete() {
		Subscriber s;
		for s in subscribers.values() {
			s.complete();
		}
		isComplete := true;
		subscribers.clear();
	}

	action getValue() returns any {
		return currentValue;
	}
}

event BehaviorSubject {	
	Observable observable;
	
	action<any> next;
	action<any> error;
	action<> complete;
	action<> returns any getValue;
	
	static action create(any initialValue) returns IBehaviorSubject {
		BehaviorSubjectHandler h := BehaviorSubjectHandler.create(initialValue);
		// Can't pull from a subject so a behavior subject is hot
		BehaviorSubject s := BehaviorSubject(Observable._create(false), h.next, h.error, h.complete, h.getValue);
		s.observable.onConnection := h.onConnection;
		return s.asIBehaviorSubject();
	}
	
	action asIBehaviorSubject() returns IBehaviorSubject {
		return IBehaviorSubject(self,
		                getValue, asISubject,
		                next, error, complete, asIObservable,
		                observable.subscribe, observable.map, observable.publish, observable.connect, observable.refCount, observable.share, observable.take, observable.takeLast, observable.first, observable.last, observable.skip, observable.skipLast, observable.filter, observable.scan, observable.scanWithInitial);
	}
	
	action asISubject() returns ISubject {
		return ISubject(self,
		                next, error, complete, asIObservable,
		                observable.subscribe, observable.map, observable.publish, observable.connect, observable.refCount, observable.share, observable.take, observable.takeLast, observable.first, observable.last, observable.skip, observable.skipLast, observable.filter, observable.scan, observable.scanWithInitial);
	}
	
	action asIObservable() returns IObservable {
		return IObservable(self, 
		                   observable.subscribe, observable.map, observable.publish, observable.connect, observable.refCount, observable.share, observable.take, observable.takeLast, observable.first, observable.last, observable.skip, observable.skipLast, observable.filter, observable.scan, observable.scanWithInitial);
	}
}