package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event DistinctBySubscriber {
	IObserver subscriber;
	action<any> returns any distinctBy;
	dictionary<any, boolean> valuesSeen;
	
	static action create(IObserver subscriber, action<any> returns any distinctBy) returns IObserver {
		DistinctBySubscriber m := DistinctBySubscriber(subscriber, distinctBy, new dictionary<any, boolean>);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
	
	action next(any value) {
		try {
			any key := value;
			ifpresent distinctBy {
				key := distinctBy(value);
			}
			if not valuesSeen.hasKey(key) {
				valuesSeen.add(key, true);
				subscriber.next(value);
			}
		} catch(Exception e) {
			subscriber.error(e);
		}	
	}
}

/** @private */
event DistinctByOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<any> returns any mapper;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, action<any> returns any distinctBy) returns action<IObserver> returns ISubscription {
		return DistinctByOnConnection(parentOnConnection, distinctBy).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := DistinctBySubscriber.create(subscriber, mapper);
		return parentOnConnection(mapSubscriber);
	}
}