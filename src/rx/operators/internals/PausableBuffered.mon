package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event SwitchIfPaused {
	action<> returns IObservable never;
	IObservable source;
	
	static action create(action<> returns IObservable never, IObservable source) returns action<any> returns IObservable {
		return SwitchIfPaused(never, source).switchIfPaused;
	}
	
	action switchIfPaused(any paused) returns IObservable {
		if <boolean> paused {
			return never();
		} else {
			return source;
		}
	}
}

/** @private */
event PausableBufferedComplexPipe {
	action<> returns IObservable never;
	IObservable trigger;
	
	static action create(action<> returns IObservable never, IObservable trigger) returns action<IObservable> returns IObservable {
		return PausableBufferedComplexPipe(never, trigger).pausableBuffered;
	}
	
	action pausableBuffered(IObservable o) returns IObservable {
		IObservable pauser := trigger
			.scanWithInitial(invertBool, true)
			.switchMap(SwitchIfPaused.create(never, o));
	
		return o.buffer(pauser).mergeAll();
	}
	
	static action invertBool(any bool, any ignore) returns any {
		return not <boolean> bool;
	}
}