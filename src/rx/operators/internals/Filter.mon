package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event FilterSubscriber {
	IObserver subscriber;
	action<any> returns boolean predicate;
	
	static action create(IObserver subscriber, action<any> returns boolean predicate) returns IObserver {
		FilterSubscriber s := FilterSubscriber(subscriber, predicate);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(s.next).build();
	}
	
	action next(any value) {
		try {
			if predicate(value) {
				subscriber.next(value);
			}
		} catch(Exception e) {
			subscriber.error(e);
		}
	}
}

/** @private */
event FilterOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<any> returns boolean predicate;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, action<any> returns boolean predicate) returns action<IObserver> returns ISubscription {
		return FilterOnConnection(parentOnConnection, predicate).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(FilterSubscriber.create(subscriber, predicate));
	}
}
