package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

event Connect {
	string id;
}

event Next {
	string id;
	any value;
}

event Error {
	string id;
	any error;
}

event Complete {
	string id;
}

event Dispose {
	string id;
}

event PublishToContextSubscriber {
	context downstreamContext;
	string id;
	IObserver subscriber;
	
	static action create(context downstreamContext, string id) returns IObserver {
		PublishToContextSubscriber s := PublishToContextSubscriber(downstreamContext, id, new IObserver);
		s.subscriber := Subscriber.create().onNext(s.next).onError(s.error).onComplete(s.complete).asIObserver();
		return s.subscriber;
	}

	action next(any value) {
		send Next(id, value) to downstreamContext;
	}
	action error(any e) {
		send Error(id, e) to downstreamContext;
		subscriber.unsubscribe();
	}
	action complete() {
		send Complete(id) to downstreamContext;
		subscriber.unsubscribe();
	}
}

event PublishToChannelSubscriber {
	string channelName;
	IObserver subscriber;
	
	static action create(string channelName) returns IObserver {
		PublishToChannelSubscriber s := PublishToChannelSubscriber(channelName, new IObserver);
		s.subscriber := Subscriber.create().onNext(s.next).onError(s.error).onComplete(s.complete).asIObserver();
		return s.subscriber;
	}

	action next(any value) {
		send Next(channelName, value) to channelName;
	}
	action error(any e) {
		send Error(channelName, e) to channelName;
		subscriber.unsubscribe();
	}
	action complete() {
		send Complete(channelName) to channelName;
		subscriber.unsubscribe();
	}
}

event PublishToHandler {
	action<IObserver> returns ISubscription parentOnConnect;
	string id;
	boolean isConnected;
	any contextOrChannel;
	
	static action createChannel(action<IObserver> returns ISubscription parentOnConnect, string channelName) returns ISubscription {
		PublishToHandler p := PublishToHandler(parentOnConnect, channelName, false, channelName);
		monitor.subscribe(channelName);
		return p._create(PublishToChannelSubscriber.create(channelName));
	}
	
	static action createContext(action<IObserver> returns ISubscription parentOnConnect, string id, context downstreamContext) returns ISubscription {
		PublishToHandler p := PublishToHandler(parentOnConnect, id, false, downstreamContext);
		return p._create(PublishToContextSubscriber.create(downstreamContext, id));	
	}
	
	action _create(IObserver subscriber) returns ISubscription {
		on Connect(id = id) and not Dispose(id = id) {
			isConnected := true;
			ISubscription s := parentOnConnect(subscriber);
		}
		on Dispose(id = id) {
			log "Tearing down PublishTo" at DEBUG;
			subscriber.unsubscribe();
		}
		subscriber.onUnsubscribe(dispose);
		return Subscription.create(subscriber).asISubscription();
	}
	
	action connected() returns boolean {
		return isConnected;
	}
	
	action dispose() {
		if connected() {
			sendDispose();
		} else {
			on Connect(id = id) {
				sendDispose();
			}
		}
	}
	
	action sendDispose() {
		send Dispose(id) to context.current();
		switch (contextOrChannel) {
			case context: {
				send Dispose(id) to contextOrChannel;
			}
			case string: {
				send Dispose(id) to contextOrChannel;
			}
		}
	}
}