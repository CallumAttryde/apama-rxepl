package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event ContainsSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any predicate;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any predicate) returns IObserver {
		ContainsSubscriber a := ContainsSubscriber(subscriber, predicate);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(a.next).onComplete(a.complete).build();
	}
	
	action next(any value) {
		try {
			if <boolean> predicate([value]) {
				subscriber.next(true);
				subscriber.complete();
			}
		} catch(Exception e) {
			subscriber.error(e);
		}
	}
	
	action complete() {
		subscriber.next(false);
		subscriber.complete();
	}
}

/** @private */
event ContainsOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any predicate;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any predicate) returns action<IObserver> returns ISubscription {
		Actions.checkAction(predicate, 1, 0, "boolean");
		return ContainsOnConnection(parentOnConnection, Actions.getCoercingGenericAction(predicate)).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(ContainsSubscriber.create(subscriber, predicate));
	}
}
