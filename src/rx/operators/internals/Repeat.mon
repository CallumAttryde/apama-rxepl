package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

event RepeatReconnectionHandler {
	action<IObserver> returns ISubscription parentOnConnection;
	IObserver downstreamSubscriber;
	IObserver upstreamSubscriber;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, IObserver downstreamSubscriber, integer count) returns ISubscription {
		RepeatReconnectionHandler r := RepeatReconnectionHandler(parentOnConnection, downstreamSubscriber, new IObserver, count);
		downstreamSubscriber.onUnsubscribe(r.unsubscribe);
		ISubscription downstreamSubscription := Subscription.create(downstreamSubscriber).asISubscription();
		r.createNewUpstreamSubscriber();
		return downstreamSubscription;
	}
	
	action createNewUpstreamSubscriber() {
		upstreamSubscriber := Subscriber.create().onNext(downstreamSubscriber.next).onError(downstreamSubscriber.error).onComplete(complete).asIObserver();
		ISubscription s := parentOnConnection(upstreamSubscriber);
	}
	
	action unsubscribe() {
		downstreamSubscriber.unsubscribe();
	}
	
	action complete() {
		count := count - 1;
		upstreamSubscriber.unsubscribe();
		if count > 0 {
			createNewUpstreamSubscriber();
		} else if count = 0 {
			downstreamSubscriber.complete();
		} else {
			log "Should not have received complete for a finished repeat" at ERROR;
		}
	}
}

event RepeatOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer count) returns action<IObserver> returns ISubscription {
		return RepeatOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return RepeatReconnectionHandler.create(parentOnConnection, subscriber, count);
	}
}