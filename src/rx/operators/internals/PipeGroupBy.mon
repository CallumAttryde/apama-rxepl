package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.ISubject;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subject;

// This file exists because it is not possible to have circular dependencies
// In this case Subject causes a circular dependency - so the .groupBy on an Observable uses an alternative constructor

event PipeGroupBySubscriber {
	IObserver subscriber;
	action<any> returns any groupBy;
	dictionary<any, ISubject> subjectByGroup;
	
	static action create(IObserver subscriber, action<any> returns any groupBy) returns IObserver {
		PipeGroupBySubscriber m := PipeGroupBySubscriber(subscriber, groupBy, new dictionary<any, ISubject>);
		subscriber.onUnsubscribe(m.unsubscribe);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).onComplete(m.complete).build();
	}
	
	action next(any value) {
		try {
			any group := groupBy(value);
			ISubject subject;
			if subjectByGroup.hasKey(group) {
				subject := subjectByGroup[group];
			} else {
				subject := Subject.create();
				subjectByGroup.add(group, subject);
				subscriber.next(subject.asIObservable());
			}
			subject.next(value);
		} catch(Exception e) {
			subscriber.error(e);
		}
	}
	
	action unsubscribe() {
		ISubject subject;
		for subject in subjectByGroup.values() {
			subject.complete();
		}		
	}
	
	action complete() {
		subscriber.complete();
	}
}

event PipeGroupByOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<any> returns any groupBy;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, action<any> returns any groupBy) returns action<IObserver> returns ISubscription {
		return PipeGroupByOnConnection(parentOnConnection, groupBy).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(PipeGroupBySubscriber.create(subscriber, groupBy));
	}
}