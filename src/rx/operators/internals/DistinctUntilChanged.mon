package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event DistinctByUntilChangedSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any distinctBy;
	any previousValue;

	static action create(IObserver subscriber, action<sequence<any> > returns any distinctBy) returns IObserver {
		DistinctByUntilChangedSubscriber m := DistinctByUntilChangedSubscriber(subscriber, distinctBy, new any);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
	
	action next(any value) {
		try {
			any key := value;
			ifpresent distinctBy {
				key := distinctBy([value]);
			}
			if previousValue != key {
				subscriber.next(value);
				previousValue := key;
			}
		} catch(Exception e) {
			subscriber.error(e);
		}	
	}
}

/** @private */
event DistinctByUntilChangedOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any distinctBy;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any distinctBy) returns action<IObserver> returns ISubscription {
		action<sequence<any> > returns any genericAction;
		ifpresent distinctBy {
			Actions.checkAction(distinctBy, 1, 0, "any");
			genericAction := Actions.getCoercingGenericAction(distinctBy);
		} else {
			genericAction := new action<sequence<any> > returns any;
		}
		return DistinctByUntilChangedOnConnection(parentOnConnection, genericAction).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := DistinctByUntilChangedSubscriber.create(subscriber, distinctBy);
		return parentOnConnection(mapSubscriber);
	}
}