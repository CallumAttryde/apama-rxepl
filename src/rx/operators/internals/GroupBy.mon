package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.ISubject;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.utils.Actions;

/** @private */
event GroupBySubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any groupBy;
	dictionary<any, ISubject> subjectByGroup;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any groupBy) returns IObserver {
		GroupBySubscriber m := GroupBySubscriber(subscriber, groupBy, new dictionary<any, ISubject>);
		subscriber.onUnsubscribe(m.unsubscribe);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).onComplete(m.complete).build();
	}
	
	action next(any value) {
		try {
			any group := groupBy([value]);
			ISubject subject;
			if subjectByGroup.hasKey(group) {
				subject := subjectByGroup[group];
			} else {
				subject := (<action<> returns ISubject> any.newInstance("com.industry.rx_epl.RepeatToFirstSubject").getAction("create"))();
				subjectByGroup.add(group, subject);
				subscriber.next(subject.asIObservable());
			}
			subject.next(value);
		} catch(Exception e) {
			subscriber.error(e);
		}
	}
	
	action unsubscribe() {
		ISubject subject;
		for subject in subjectByGroup.values() {
			subject.complete();
		}		
	}
	
	action complete() {
		subscriber.complete();
	}
}

/** @private */
event GroupByOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any groupBy;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any groupBy) returns action<IObserver> returns ISubscription {
		Actions.checkAction(groupBy, 1, 0, "any");
		return GroupByOnConnection(parentOnConnection, Actions.getCoercingGenericAction(groupBy)).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(GroupBySubscriber.create(subscriber, groupBy));
	}
}