package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IDisposable;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

/** @private */
event ObserveOnHandler {
	string channel;
	context downstreamContext;
	action<string> returns IObservable observeFromChannel;
	action<IObservable, action<> > observableConstructor;
	
	static action create(action<string> returns IDisposable observeToChannel, action<string> returns IObservable observeFromChannel, context downstreamContext, action<IObservable, action<> > observableConstructor) returns IDisposable {
		ObserveOnHandler o := ObserveOnHandler("ObserveOnChannel" + integer.getUnique().toString(), downstreamContext, observeFromChannel, observableConstructor);
		IDisposable d := observeToChannel(o.channel);
		o.spawnToContext();
		return d;
	}
	
	action spawnToContext() {
		spawn runOnOtherContext() to downstreamContext;
	}
	
	action runOnOtherContext() {
		observableConstructor(observeFromChannel(channel), ObserveFromDispose.create(channel));
	}
}