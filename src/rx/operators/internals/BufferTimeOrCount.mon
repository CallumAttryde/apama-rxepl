package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Utils;

/** @private */
event BufferTimeOrCountSubscriberFactory {
	IObserver subscriber;
	IObserver upstream;
	float duration;
	sequence<any> buffer;
	float lastEmitTimestamp;
	integer count;
	listener timeListener;
	
	static action create(IObserver subscriber, float duration, integer count) returns BufferTimeOrCountSubscriberFactory {
		return BufferTimeOrCountSubscriberFactory(subscriber, new IObserver, duration, new sequence<any>, -float.INFINITY, count, new listener);
	}
	
	action next(any value) {
		buffer.append(value);
		if buffer.size() = count {
			emitBuffer();
		}
	}
	
	action complete() {
		// Don't emit empty bucket if we already emitted at this timestamp
		if lastEmitTimestamp != currentTime or buffer.size() > 0 {
			emitBuffer();
		}
		timeListener.quit();
		subscriber.complete();
	}
	
	action emitBuffer() {
		lastEmitTimestamp := currentTime;
		subscriber.next(buffer);
		buffer := new sequence<any>;
		createTimeListener();
	}
	
	action createTimeListener() {
		ifpresent timeListener {
			timeListener.quit();
		}
		timeListener := on wait(duration) {
			emitBuffer();
		}
	}
	
	action getUpstream() returns IObserver {
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(next).onComplete(complete).build();
	}
}

/** @private */
event BufferTimeOrCountOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	float duration;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, float duration, integer count) returns action<IObserver> returns ISubscription {
		return BufferTimeOrCountOnConnection(parentOnConnection, duration, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		BufferTimeOrCountSubscriberFactory factory := BufferTimeOrCountSubscriberFactory.create(subscriber, duration, count);
		ISubscription s := parentOnConnection(factory.getUpstream());
		if subscriber.subscribed() {
			factory.createTimeListener();
		}
		return s;
	}
}