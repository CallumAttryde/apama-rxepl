package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;

event ZipSubscriberFactory {
	IObserver downstreamSubscriber;
	integer subscriberCount;
	
	dictionary<integer, sequence<any> > valuesById;
	dictionary<integer, IObserver> upstreamSubscribersById;
	dictionary<integer, boolean> completeSubscribersById;
	
	static action create(IObserver subscriber) returns ZipSubscriberFactory {
		return ZipSubscriberFactory(subscriber, 0, new dictionary<integer, sequence<any> >, new dictionary<integer, IObserver>, new dictionary<integer, boolean>);
	}
	
	action createUpstreamSubscriber() returns IObserver {
		integer id := subscriberCount;
		subscriberCount := subscriberCount + 1;
		IObserver o := Subscriber.create().onNext(CombineLatestOnNext.create(id, next)).onError(downstreamSubscriber.error).onComplete(CombineLatestOnComplete.create(id, complete)).asIObserver();
		downstreamSubscriber.onUnsubscribe(o.unsubscribe);
		upstreamSubscribersById.add(id, o);
		return o;
	}
	
	action next(integer id, any value) {
		valuesById.getOrAddDefault(id).append(value);
		if valuesById.size() = subscriberCount {
			boolean sendComplete := false;
			sequence<any> nextValues := new sequence<any>;
			integer key;
			// These are automatically sorted in ascending order of keys
			for key in valuesById.keys() {
				sequence<any> values := valuesById[key];
				nextValues.append(values[0]);
				values.remove(0);
				if values.size() = 0 {
					valuesById.remove(key);

					// If there are no values from this source left to zip and it is complete then send the complete after sending the final value
					if completeSubscribersById.hasKey(key) {
						sendComplete := true;
					}
				}
			}			
			downstreamSubscriber.next(nextValues);
			if downstreamSubscriber.subscribed() and sendComplete {
				downstreamSubscriber.complete();
			}
		}
	}
	
	action complete(integer id) {
		completeSubscribersById.add(id, true);
		upstreamSubscribersById[id].unsubscribe();
		// If there are no values from this source left to zip then send the complete immediately, there's no more values that can be generated by the zip
		if valuesById.getOrDefault(id).size() = 0 {
			downstreamSubscriber.complete();
		}
	}
}

event ZipOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	sequence<IObservable> observables;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, sequence<IObservable> observables) returns action<IObserver> returns ISubscription {
		return ZipOnConnection(parentOnConnection, observables).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		ZipSubscriberFactory factory := ZipSubscriberFactory.create(subscriber);

		IObserver mainUpstreamObserver := factory.createUpstreamSubscriber();
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in observables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber());
		}
		
		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		// Connect the main observable
		ISubscription firstConnection := parentOnConnection(mainUpstreamObserver);
		
		// Connect the others
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			ISubscription upstreamSubscription := observables[i].connectObserver(upstream);
			i := i + 1;
		}
		
		return s;
	}
}