package com.industry.rx_epl.operators.internals;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.IObserverBuilder;
using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.ISubscription;
using com.industry.rx_epl.Subscription;
using com.industry.rx_epl.Subscriber;
using com.industry.rx_epl.utils.Actions;

/** @private */
event TakeWhileSubscriber {
	IObserver subscriber;
	action<sequence<any> > returns any predicate;
	boolean whileDone;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any predicate) returns IObserver {
		TakeWhileSubscriber m := TakeWhileSubscriber(subscriber, predicate, false);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
    
	action next(any value) {
		if whileDone {
			// This shouldn't happen - but a bad generator might cause it to
			log "Operator 'TakeWhile' received unexpected extra value, observable should have unsubscribed" at ERROR;
		}
		try {
			if <boolean> predicate([value]) {
				subscriber.next(value);
			} else {
				whileDone := true;
				subscriber.complete();
			}
		} catch(Exception e) {
			subscriber.error(e);
		}
	}
}

/** @private */
event TakeWhileOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<sequence<any> > returns any predicate;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, any predicate) returns action<IObserver> returns ISubscription {
		Actions.checkAction(predicate, 1, 0, "boolean");
		return TakeWhileOnConnection(parentOnConnection, Actions.getCoercingGenericAction(predicate)).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(TakeWhileSubscriber.create(subscriber, predicate));
	}
}