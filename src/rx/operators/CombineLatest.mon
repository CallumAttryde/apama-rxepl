package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.industry.rx_epl.operators.Map;
using com.industry.rx_epl.operators.internals.CombineLatestOnConnection;
using com.industry.rx_epl.operators.internals.CombineLatestCombinerMapper;

event CombineLatestToSequence {	
	sequence<IObservable> otherObservables;
	static action create(sequence<IObservable> otherObservables) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return CombineLatestToSequence(otherObservables).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return CombineLatestOnConnection.create(onConnection, otherObservables);
	}
}

event CombineLatest {
	static action create(sequence<IObservable> otherObservables, action<sequence<any> > returns any combiner) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return Pipe.create([CombineLatestToSequence.create(otherObservables), Map.create(CombineLatestCombinerMapper.create(combiner))]);
	}
}