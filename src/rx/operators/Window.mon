package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.industry.rx_epl.operators.internals.WindowOnConnection;
using com.industry.rx_epl.operators.internals.WindowCountOnConnection;
using com.industry.rx_epl.operators.internals.WindowTimeOnConnection;
using com.industry.rx_epl.operators.internals.WindowTimeOrCountOnConnection;

event GroupByWindow {
	IObservable trigger;
	
	static action create(IObservable trigger) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return GroupByWindow(trigger).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return WindowOnConnection.create(onConnection, trigger);
	}
}

event WindowCount {
	integer count;
	
	static action create(integer count) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return WindowCount(count).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return WindowCountOnConnection.create(onConnection, count);
	}
}

event WindowTime {
	float time;
	
	static action create(float time) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return WindowTime(time).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return WindowTimeOnConnection.create(onConnection, time);
	}
}

event WindowTimeOrCount {
	float time;
	integer count;
	
	static action create(float time, integer count) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return WindowTimeOrCount(time, count).pipeModifier;
	}

	action pipeModifier(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		return WindowTimeOrCountOnConnection.create(onConnection, time, count);
	}
}