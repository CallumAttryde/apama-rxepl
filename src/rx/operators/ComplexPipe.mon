package com.industry.rx_epl.operators;

using com.industry.rx_epl.IObservable;
using com.industry.rx_epl.IObserver;
using com.industry.rx_epl.ISubscription;

using com.apama.exceptions.Exception;

using com.industry.rx_epl.operators.internals.ComplexPipeOnConnection;

event ComplexPipe {
	action<IObservable> returns IObservable complexPipe;
	
	static action create(action<IObservable> returns IObservable complexPipe) returns action<action<IObserver> returns ISubscription> returns action<IObserver> returns ISubscription {
		return ComplexPipe(complexPipe).pipeable;
	}
	
	action pipeable(action<IObserver> returns ISubscription onConnection) returns action<IObserver> returns ISubscription {
		any o := any.newInstance("com.industry.rx_epl.Observable").getAction("_create").getGenericAction()(new sequence<any>);
		o.setField("onConnection", onConnection);
		return ComplexPipeOnConnection.create((<action<> returns IObservable> o.getAction("asIObservable"))(), complexPipe);
	}
}