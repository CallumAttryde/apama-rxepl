package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event TakeSubscriber {
	Subscriber downstreamSubscriber;
    Subscriber upstreamSubscriber;
	integer count;
	boolean hasSentLast;
	
	static action create(Subscriber downstreamSubscriber, integer count) returns Subscriber {
		TakeSubscriber m := TakeSubscriber(downstreamSubscriber, new Subscriber, count, false);
		// Copy everything except the onPull - Needs to have custom handling so that we don't pull from upstream after sending last next
		Subscriber upstreamSubscriber := downstreamSubscriber.copy().onNext(m.next);
        upstreamSubscriber._onPull := OnPull.create();
        m.upstreamSubscriber := upstreamSubscriber;
        downstreamSubscriber._onPull.set(m.onPull);
		return upstreamSubscriber;
	}
	
	action onPull() {
		if not hasSentLast {
			// Don't need to sync limit this because the sync limitting will be done by the downstream
			upstreamSubscriber._pull();
		}
	}
    
	action next(any value) {
		count := count - 1;
		if count > 0 {
			downstreamSubscriber.next(value);
		} else {
			if hasSentLast {
				// This shouldn't happen - but a bad generator might cause it to
				log "Operator 'Take' received unexpected extra value, observable should have unsubscribed" at ERROR;
			} else {
				hasSentLast := true;
				downstreamSubscriber.next(value);
				downstreamSubscriber.complete();
			}
		}
	}
}

event TakeOnConnection {
	action<Subscriber> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<Subscriber> returns ISubscription parentOnConnection, integer count) returns action<Subscriber> returns ISubscription {
		return TakeOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		return parentOnConnection(TakeSubscriber.create(subscriber, count));
	}
}