package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event TakeSubscriber {
	IObserver subscriber;
	integer count;
	boolean hasSentLast;
	
	static action create(IObserver subscriber, integer count) returns IObserver {
		TakeSubscriber m := TakeSubscriber(subscriber, count, false);
		IObserver upstreamSubscriber := IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
		subscriber.onPull := m.onPull;
		return upstreamSubscriber;
	}
	
	action onPull(action<> upstreamPull) {
		if not hasSentLast {
			// Don't need to sync limit this because the sync limitting will be done by the downstream
			upstreamPull();
		}
	}
    
	action next(any value) {
		count := count - 1;
		if count > 0 {
			subscriber.next(value);
		} else {
			if hasSentLast {
				// This shouldn't happen - but a bad generator might cause it to
				log "Operator 'Take' received unexpected extra value, observable should have unsubscribed" at ERROR;
			} else {
				hasSentLast := true;
				subscriber.next(value);
				subscriber.complete();
			}
		}
	}
}

event TakeOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer count) returns action<IObserver> returns ISubscription {
		return TakeOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(TakeSubscriber.create(subscriber, count));
	}
}