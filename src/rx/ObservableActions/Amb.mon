package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event AmbSubscriberFactory {
	IObserver downstreamSubscriber;	
	boolean receivedValue;
	
	dictionary<integer, IObserver> upstreamSubscribersById;
	
	static action create(IObserver subscriber) returns AmbSubscriberFactory {
		return AmbSubscriberFactory(subscriber, false, new dictionary<integer, IObserver>);
	}
	
	action createUpstreamSubscriber() returns IObserver {
		integer id := upstreamSubscribersById.size();
		IObserver o := Subscriber.create().onNext(CombineLatestOnNext.create(id, next)).onError(downstreamSubscriber.error).onComplete(downstreamSubscriber.complete).asIObserver();
		downstreamSubscriber.onUnsubscribe(o.unsubscribe);
		upstreamSubscribersById.add(id, o);
		return o;
	}
	
	action next(integer id, any value) {
		if not receivedValue {
			receivedValue := true;
			integer otherId;
			for otherId in upstreamSubscribersById.keys() {
				if otherId != id {
					upstreamSubscribersById[otherId].unsubscribe();
					upstreamSubscribersById.remove(otherId);
				}
			}
		}
		downstreamSubscriber.next(value);
	}
}

event AmbOnConnection {
	sequence<IObservable> observables;
	
	static action create(sequence<IObservable> observables) returns action<IObserver> returns ISubscription {
		return AmbOnConnection(observables).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		AmbSubscriberFactory factory := AmbSubscriberFactory.create(subscriber);
		
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in observables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber());
		}
		
		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			ISubscription upstreamSubscription := observables[i].connectObserver(upstream);
			if factory.receivedValue or not subscriber.subscribed() {
				break;
			}
			i := i + 1;
		}
		
		return s;
	}
}