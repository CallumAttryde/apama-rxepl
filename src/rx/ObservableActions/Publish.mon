package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event SubscriberAndSubscription {
	Subscriber subscriber;
	Subscription subscription;
}

event PublishSubscriber {
	dictionary<integer, SubscriberAndSubscription> subscribers;
	action<> onComplete;
	action<> pull;
	
	static action create(dictionary<integer, SubscriberAndSubscription> subscribers, action<> onComplete, boolean cold) returns Subscriber {
		PublishSubscriber p := PublishSubscriber(subscribers, onComplete, new action<>);
		Subscriber s := Subscriber.create().onNext(p.next).onError(p.error).onComplete(p.complete);
		if cold {
			s._isPulling := true;
			p.pull := LimitSyncInvoke.create(GlobalConstants.MAX_SYNC_VALUES, s._pull).invoke;
		}
		return s;
	}
	
	action next(any value) {
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscriber.next(value);
		}
		ifpresent pull {
			pull();
		}
	}
	
	action error(any e) {
		SubscriberAndSubscription ss;
		for ss in subscribers.values(){
			ss.subscriber.error(e);
		}		
	}
	
	action complete() {
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscriber.complete();
		}
		onComplete();
	}
}

event PublishOnDisconnection {
	dictionary<integer, SubscriberAndSubscription> subscribers;
	integer subscriberId;
	
	static action create(dictionary<integer, SubscriberAndSubscription> subscribers, integer subscriberId) returns action<> {
		return PublishOnDisconnection(subscribers, subscriberId).onDisconnect;
	}
	
	action onDisconnect() {
		// Subscribers might already have been removed. 
		// Specifically if it is refCounted and we receive a complete because reset is called twice:
		// once by the auto-completing subscriber
		// once by the refCounter triggered by the auto-completing subscriber
		if subscribers.hasKey(subscriberId) {
			subscribers.remove(subscriberId);
		}
	}
}

event PublishHandler {
	action<Subscriber> returns ISubscription parentOnConnection;
	dictionary<integer, SubscriberAndSubscription> subscribers;
	optional<ISubscription> upstreamSubscription;
	Subscriber upstreamSubscriber;
	boolean isComplete;
	boolean cold;
	
	static action create(action<Subscriber> returns ISubscription parentOnConnection, boolean cold) returns PublishHandler {
		return PublishHandler(parentOnConnection, new dictionary<integer, SubscriberAndSubscription>, new optional<ISubscription>, new Subscriber, false, cold);
	}
	
	action connect() returns IDisposable {
		if not isComplete {
			// If there isn't an upstream subscription then create one
			if upstreamSubscription.empty() {
				upstreamSubscriber := PublishSubscriber.create(subscribers, onComplete, cold);
				upstreamSubscription := parentOnConnection(upstreamSubscriber);
				if cold {
					// Don't need to Sync limit this - it'll only be called once (during connection)
					upstreamSubscriber._pull();
				}
			}
		} else {
			SubscriberAndSubscription ss;
			for ss in subscribers.values() {
				ss.subscriber.complete();
			}
		}
		return Disposable.create(reset).asIDisposable();
	}
	
	action onComplete() {
		isComplete := true;
        upstreamSubscription.getOrThrow().unsubscribe(); // onComplete wouldn't be called if the upstreamSubscription didn't exist
	}
	
	action reset() {
		ifpresent upstreamSubscription {
			upstreamSubscription.unsubscribe();
		}
		upstreamSubscription := new optional<ISubscription>;
		SubscriberAndSubscription ss;
		for ss in subscribers.values() {
			ss.subscription.unsubscribe();
		}
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		// Must create subscription before calling ay next, error, complete
		Subscription downstreamSubscription := Subscription.create(subscriber);
		if not isComplete {
			SubscriberAndSubscription ss := SubscriberAndSubscription(subscriber, downstreamSubscription);
			subscribers.add(subscriber.id, ss);
			downstreamSubscription.add(PublishOnDisconnection.create(subscribers, subscriber.id));
		} else {
			subscriber.complete();
		}
		return downstreamSubscription.asISubscription();
	}
}
