package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event WithLatestFromSubscriberFactory {
	IObserver downstreamSubscriber;
	action<sequence<any> > returns any combiner;
	integer subscriberCount;
	
	dictionary<integer, any> latestValuesById;
	dictionary<integer, boolean> completeSubscribersById;
	dictionary<integer, PullingLoop> pullingLoopById;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any combiner) returns WithLatestFromSubscriberFactory {
		return WithLatestFromSubscriberFactory(subscriber, combiner, 0, new dictionary<integer, any>, new dictionary<integer, boolean>, new dictionary<integer, PullingLoop>);
	}
	
	action createUpstreamSubscriber() returns IObserver {
		integer id := subscriberCount;
		subscriberCount := subscriberCount + 1;
		IObserver o := IObserverBuilder.create(downstreamSubscriber.createUpstream()).onNext(CombineLatestOnNext.create(id, next)).onComplete(CombineLatestOnComplete.create(id, complete)).build();
		pullingLoopById.add(id, PullingLoop.create(o.pull));
		return o;
	}
	
	action next(integer id, any value) {
		latestValuesById.add(id, value);
		if id = 0 and latestValuesById.size() = subscriberCount {
			// These are automatically sorted in ascending order of keys
			try {
				downstreamSubscriber.next(combiner(latestValuesById.values()));
			} catch(Exception e) {
				downstreamSubscriber.error(e);
				return;
			}
		}
		pullingLoopById[id].pull();
	}
	
	action complete(integer id) {
		completeSubscribersById.add(id, true);
		if id = 0 and completeSubscribersById.size() = subscriberCount{
			downstreamSubscriber.complete();
		}
	}
	
	action pullAll() {
		PullingLoop p;
		for p in pullingLoopById.values() {
			p.pull();
		}
	}
}

event WithLatestFromOnConnection {
	sequence<IObservable> observables;
	action<sequence<any> > returns any combiner;
	boolean receivedValue;
	
	static action create(sequence<IObservable> observables, action<sequence<any> > returns any combiner) returns action<IObserver> returns ISubscription {
		return WithLatestFromOnConnection(observables, combiner, true).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		WithLatestFromSubscriberFactory factory := WithLatestFromSubscriberFactory.create(subscriber, combiner);
		
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in observables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber());
		}
		
		ISubscription s := new ISubscription;
		
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			s := observables[i].connectObserver(upstream);
			i := i + 1;
		}
		
		factory.pullAll();
		
		return s;
	}
}