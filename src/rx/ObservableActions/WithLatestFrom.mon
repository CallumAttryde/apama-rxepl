package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event WithLatestFromSubscriberFactory {
	IObserver downstreamSubscriber;
	action<sequence<any> > returns any combiner;
	integer subscriberCount;
	integer emittingId;
	
	dictionary<integer, any> latestValuesById;
	dictionary<integer, IObserver> upstreamSubscribersById;
	dictionary<integer, boolean> completeSubscribersById;
	
	static action create(IObserver subscriber, action<sequence<any> > returns any combiner) returns WithLatestFromSubscriberFactory {
		return WithLatestFromSubscriberFactory(subscriber, combiner, 0, 0, new dictionary<integer, any>, new dictionary<integer, IObserver>, new dictionary<integer, boolean>);
	}
	
	action createUpstreamSubscriber(boolean causesEmission) returns IObserver {
		subscriberCount := subscriberCount + 1;
		integer id;
		if causesEmission {
			id := 0;
		} else {
			id := subscriberCount;
		}
		IObserver o := Subscriber.create().onNext(CombineLatestOnNext.create(id, next)).onError(downstreamSubscriber.error).onComplete(CombineLatestOnComplete.create(id, complete)).asIObserver();
		downstreamSubscriber.onUnsubscribe(o.unsubscribe);
		upstreamSubscribersById.add(id, o);
		return o;
	}
	
	action next(integer id, any value) {
		latestValuesById.add(id, value);
		if id = emittingId and latestValuesById.size() = subscriberCount {
			// These are automatically sorted in ascending order of keys
			try {
				downstreamSubscriber.next(combiner(latestValuesById.values()));
			} catch(Exception e) {
				downstreamSubscriber.error(e);
				return;
			}
		}
	}
	
	action complete(integer id) {
		completeSubscribersById.add(id, true);
		if id = emittingId {
			downstreamSubscriber.complete();
		}
		upstreamSubscribersById[id].unsubscribe();
	}
}

event WithLatestFromOnConnection {
	IObservable emissionCausingObservable;
	sequence<IObservable> otherObservables;
	action<sequence<any> > returns any combiner;
	boolean receivedValue;
	
	static action create(IObservable emissionCausingObservable, sequence<IObservable> otherObservables, action<sequence<any> > returns any combiner) returns action<IObserver> returns ISubscription {
		return WithLatestFromOnConnection(emissionCausingObservable, otherObservables, combiner, true).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		WithLatestFromSubscriberFactory factory := WithLatestFromSubscriberFactory.create(subscriber, combiner);
		
		sequence<IObserver> upstreamSubscribers := new sequence<IObserver>;
		
		IObservable observable;
		for observable in otherObservables {
			upstreamSubscribers.append(factory.createUpstreamSubscriber(false));
		}
		IObserver emittingUpstream := factory.createUpstreamSubscriber(true);

		ISubscription s := Subscription.create(subscriber).asISubscription();
		
		integer i := 0;
		while i < upstreamSubscribers.size() {
			IObserver upstream := upstreamSubscribers[i];
			ISubscription upstreamSubscription := otherObservables[i].connectObserver(upstream);
			i := i + 1;
		}
		// Make sure that the emissionCausingObservable is the last one to connect
		ISubscription upstreamSubscription := emissionCausingObservable.connectObserver(emittingUpstream);
		
		return s;
	}
}