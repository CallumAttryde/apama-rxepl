package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event SubscribeSubscriber {
	action<> completeSubscriber;
	action<> onComplete;
	static action create(Subscriber subscriber, action<> onComplete) returns Subscriber {
		return subscriber.copy().onComplete(SubscribeSubscriber(subscriber.complete, onComplete).complete);
	}
	
	action complete() {
		completeSubscriber();
		onComplete();
	}
}

event PullingSubscriber {
	Subscriber subscriber;
	action<> pull;
	
	static action create(Subscriber subscriber) returns PullingSubscriber {
		return PullingSubscriber(subscriber, true, LimitSyncInvoke.create(GlobalConstants.MAX_SYNC_VALUES, subscriber._pull).invoke);
	}
	
	action createSubscriber() returns Subscriber {
		return subscriber.copy().onNext(next);
	}
	
	action next(any value) {
		subscriber.next(value);
		if subscriber._isPulling and not subscriber._subscription.empty() and subscriber._subscription.getOrThrow().subscribed() {
			pull();
		}
	}
}

event SubscribeOnConnection {
	action<Subscriber> returns ISubscription parentOnConnection;
	boolean pulling;
	static action create(action<Subscriber> returns ISubscription parentOnConnection, boolean pulling) returns action<Subscriber> returns ISubscription {
		return SubscribeOnConnection(parentOnConnection, pulling).onConnection;
	}
	
	action onConnection(Subscriber subscriber) returns ISubscription {
		if pulling {
			PullingSubscriber pullingSubscriber := PullingSubscriber.create(SubscribeSubscriber.create(subscriber, deferredUnsubscribe.unsubscribe));
			ISubscription s := parentOnConnection(pullingSubscriber.createSubscriber());
			subscriber._pull();
			return s;
		} else {
			DeferredUnsubscribe deferredUnsubscribe := DeferredUnsubscribe.create();
			ISubscription s := parentOnConnection(SubscribeSubscriber.create(subscriber, deferredUnsubscribe.unsubscribe));
			deferredUnsubscribe.resolve(s.unsubscribe);
			return s;
		}
	}
}