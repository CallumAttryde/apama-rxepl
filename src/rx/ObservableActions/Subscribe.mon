package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event PullingLoop {
	action<> _pull;
	boolean _pullAgain;
	boolean _inPullingLoop;
	
	static action create(action<> pull) returns PullingLoop {
		return PullingLoop(pull, false, false);
	}
	
	action _doPull() {
		_pullAgain := true;
		_inPullingLoop := true;
		while _pullAgain {
			_pullAgain := false;
			_pull();
		}
		_inPullingLoop := false;
	}
	
	action pull() {
		if _inPullingLoop {
			_pullAgain := true;
		} else {
			_doPull();
		}
	}
}

event SubscribeSubscriber {
	action<> completeSubscriber;
	action<> onComplete;
	static action create(IObserver subscriber, action<> onComplete) returns IObserver {
		return IObserverBuilder.create(subscriber.createUpstream()).onComplete(SubscribeSubscriber(subscriber.complete, onComplete).complete).build();
	}
	
	action complete() {
		completeSubscriber();
		onComplete();
	}
}

event PullingSubscriber {
	IObserver subscriber;
	PullingLoop pullingLoop;
	
	static action create(IObserver subscriber) returns IObserver {
		return PullingSubscriber(subscriber, PullingLoop.create(subscriber.pull)).createSubscriber();
	}
	
	action createSubscriber() returns IObserver {
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(next).build();
	}
	
	action next(any value) {
		subscriber.next(value);
		pullingLoop.pull();
	}
}

event SubscribeOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection) returns action<IObserver> returns ISubscription {
		return SubscribeOnConnection(parentOnConnection).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver pullingSubscriber := PullingSubscriber.create(SubscribeSubscriber.create(subscriber, subscriber.unsubscribe));
		ISubscription s := parentOnConnection(pullingSubscriber);
		subscriber.pull();
		return s;
	}
}