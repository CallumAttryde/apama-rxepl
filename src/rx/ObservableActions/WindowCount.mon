package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event WindowCountSubscriber {
	action<> returns IObservable createObservable;
	action<IObservable> returns action<action<IObserver> returns ISubscription> getSetOnConnection;
	IObserver subscriber;
	IObserver upstream;
	integer count;
	integer currentCount;
	optional<ISubject> currentSubject;
	
	static action create(action<> returns IObservable createObservable, action<IObservable> returns action<action<IObserver> returns ISubscription> getSetOnConnection, IObserver subscriber, integer count) returns IObserver {
		WindowCountSubscriber w := WindowCountSubscriber(createObservable, getSetOnConnection, subscriber, new IObserver, count, 0, new optional<ISubject>);
		w.createNextSubject();
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(w.next).onComplete(w.complete).build();
	}
	
	action next(any value) {
		currentCount := currentCount + 1;
		currentSubject.getOrThrow().next(value);
		if currentCount = count {
			createNextSubject();
		}
	}
	
	action complete() {
		currentSubject.getOrThrow().complete();
		subscriber.complete();
	}
	
	action createNextSubject() {
		currentCount := 0;
		ifpresent currentSubject {
			currentSubject.complete();
		}
		IObservable o := createObservable();
		currentSubject := BaseSubject.create(o, getSetOnConnection(o));
		subscriber.next(currentSubject.getOrThrow().asIObservable());
	}
}

event WindowCountOnConnection {
	action<> returns IObservable createObservable;
	action<IObservable> returns action<action<IObserver> returns ISubscription> getSetOnConnection;
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<> returns IObservable createObservable, action<IObservable> returns action<action<IObserver> returns ISubscription> getSetOnConnection, action<IObserver> returns ISubscription parentOnConnection, integer count) returns action<IObserver> returns ISubscription {
		return WindowCountOnConnection(createObservable, getSetOnConnection, parentOnConnection, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(WindowCountSubscriber.create(createObservable, getSetOnConnection, subscriber, count));
	}
}