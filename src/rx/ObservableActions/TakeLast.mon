package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event TakeLastOnPull {
	IObserver downstreamSubscriber;
	sequence<any> values;
	integer i;
	boolean isFirstPull;
	
	static action create(sequence<any> values, IObserver downstreamSubscriber) returns action<action<> > {
		return TakeLastOnPull(downstreamSubscriber, values, 0, true).onPull;
	}
	
	action onPull(action<> upstreamPull) {
		// Wait until we get the first pull from downstream to pull from the upstream
		if isFirstPull {
			isFirstPull := false;
			upstreamPull();
		} else {
			if i < values.size() {
				i := i + 1;
				downstreamSubscriber.next(values[i-1]);
			} else {
				downstreamSubscriber.complete();
			}
		}
	}
}


event TakeLastSubscriber {
	IObserver downstreamSubscriber;
	integer count;
	sequence<any> values;
	action<> pullFromUpstream;
	boolean isComplete;
	
	static action create(IObserver downstreamSubscriber, integer count) returns IObserver {
		TakeLastSubscriber m := TakeLastSubscriber(downstreamSubscriber, count, new sequence<any>, new action<>, false);
		IObserver upstreamSubscriber := IObserverBuilder.create(downstreamSubscriber.createUpstream()).onNext(m.next).onComplete(m.complete).build();
		
		// If the downstream subscriber is a pulling subscriber then we're also a pulling subscriber
		if downstreamSubscriber.isPulling() {
			downstreamSubscriber.onPull := TakeLastOnPull.create(m.values, downstreamSubscriber);
			m.pullFromUpstream := upstreamSubscriber.pull;
		}
		return upstreamSubscriber;
	}
	
	action next(any value) {
		values.append(value);
		if values.size() > count {
			values.remove(0);
		}
		
		ifpresent pullFromUpstream {
			pullFromUpstream();
		}
	}
	
	action complete() {
		isComplete := true;
		if downstreamSubscriber.isPulling() {
			// We can just pull as though we're the downstream to trigger the TakeLastOnPull,
			// the downstream must have pulled by this point otherwise we wouldn't have received a complete
			downstreamSubscriber.pull();
		} else {
			any value;
			for value in values {
				downstreamSubscriber.next(value);
			}
			downstreamSubscriber.complete();
		}
	}
}

event TakeLastOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	integer count;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, integer count) returns action<IObserver> returns ISubscription {
		return TakeLastOnConnection(parentOnConnection, count).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver takeLastSubscriber := TakeLastSubscriber.create(subscriber, count);
		return parentOnConnection(takeLastSubscriber);
	}
}