package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event DelaySubscriber {
	IObserver subscriber;
	IObserver upstreamSubscriber;
	float delay;
	
	static action create(IObserver subscriber, float delay) returns IObserver {
		DelaySubscriber m := DelaySubscriber(subscriber, new IObserver, delay);
		m.upstreamSubscriber := Subscriber.create().onNext(m.next).onError(subscriber.error).onComplete(m.complete).asIObserver();
		subscriber.onUnsubscribe(m.upstreamSubscriber.unsubscribe);
		return m.upstreamSubscriber;
	}
	
	action next(any value) {
		on wait(delay) {
			if subscriber.subscribed() {
				subscriber.next(value);
			}
		}
	}
	
	action complete() {
		on wait(delay) {
			if subscriber.subscribed() {
				subscriber.complete();
			}
		}
		upstreamSubscriber.unsubscribe();
	}
}

event DelayOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	float delay;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, float delay) returns action<IObserver> returns ISubscription {
		return DelayOnConnection(parentOnConnection, delay).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver delaySubscriber := DelaySubscriber.create(subscriber, delay);
		ISubscription s := parentOnConnection(delaySubscriber);
		return Subscription.create(subscriber).asISubscription();
	}
}