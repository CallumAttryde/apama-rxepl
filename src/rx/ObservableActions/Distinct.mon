package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event DistinctBySubscriber {
	IObserver subscriber;
	action<any> returns any distinctBy;
	
	dictionary<any, boolean> valuesSeen;
	
	static action create(IObserver subscriber, action<any> returns any distinctBy) returns IObserver {
		DistinctBySubscriber m := DistinctBySubscriber(subscriber, distinctBy, new dictionary<any, boolean>);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).build();
	}
	
	action next(any value) {
		try {
			any key := value;
			ifpresent distinctBy {
				key := distinctBy(value);
			}
			if not valuesSeen.hasKey(key) {
				valuesSeen.add(key, true);
				subscriber.next(value);
			} else {
				if subscriber.isPulling() {
					subscriber.pull();
				}
			}
		} catch(Exception e) {
			subscriber.error(e);
			return;
		}	
	}
}

event DistinctByOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	action<any> returns any mapper;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, action<any> returns any distinctBy) returns action<IObserver> returns ISubscription {
		return DistinctByOnConnection(parentOnConnection, distinctBy).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		IObserver mapSubscriber := DistinctBySubscriber.create(subscriber, mapper);
		return parentOnConnection(mapSubscriber);
	}
}