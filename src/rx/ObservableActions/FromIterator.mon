package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event FromIteratorOnPull {
	IObserver subscriber;
	action<> returns any iterator;
	
	static action create(action<> returns any iterator, IObserver subscriber) returns action<action<> > {
		return FromIteratorOnPull(subscriber, iterator).onPull;
	}
	
	action onPull(action<> doNotCall) {
		any value := new any;
		
		try {
			value := iterator();
		} catch(Exception e) {
			subscriber.error(e);
		}
		
		ifpresent value {
			subscriber.next(value);
		} else {
			subscriber.complete();
		}
	}
}

event FromIteratorNonPulling {
	IObserver subscriber;
	action<> returns any iterator;
	boolean stopped;
	action<> syncLimittedCall;
	
	static action createAndCall(action<> returns any iterator, IObserver subscriber) {
		FromIteratorNonPulling handler := FromIteratorNonPulling(subscriber, iterator, false, new action<>);
		handler.syncLimittedCall := LimitSyncInvoke.create(GlobalConstants.MAX_SYNC_VALUES, handler.call).invoke;
		subscriber.onUnsubscribe(handler.stop);
		handler.syncLimittedCall();
	}
	
	action call() {
		if stopped {
			return;
		}
		any value := new any;
		
		try {
			value := iterator();
		} catch(Exception e) {
			subscriber.error(e);
		}
		
		ifpresent value {
			subscriber.next(value);
			syncLimittedCall();
		} else {
			subscriber.complete();
		}
	}
	
	action stop() {
		stopped := true;
	}
}

event FromIteratorOnConnection {
	action<> returns any iterator;
	static action create(action<> returns any iterator) returns action<IObserver> returns ISubscription {
		return FromIteratorOnConnection(iterator).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		// Must create subscription before calling ay next, error, complete
		ISubscription subscription := Subscription.create(subscriber).asISubscription();
		if subscriber.isPulling() {
			subscriber.onPull := FromIteratorOnPull.create(iterator, subscriber);
		} else {
			FromIteratorNonPulling.createAndCall(iterator, subscriber);
		}
		return subscription;
	}
}