package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event FromIteratorOnPull {
	IObserver subscriber;
	action<> returns any iterator;
	boolean isComplete;
	
	static action create(action<> returns any iterator, IObserver subscriber) returns action<action<> > {
		FromIteratorOnPull f := FromIteratorOnPull(subscriber, iterator, false);
		subscriber.onUnsubscribe(f.markComplete);
		return f.onPull;
	}
	
	action onPull(action<> doNotCall) {
		if isComplete {
			return;
		}
		any value := new any;
		
		try {
			value := iterator();
		} catch(Exception e) {
			subscriber.error(e);
		}
		
		ifpresent value {
			subscriber.next(value);
		} else {
			subscriber.complete();
		}
	}
	
	action markComplete() {
		isComplete := true;
	}
}

event FromIteratorOnConnection {
	action<> returns any iterator;
	static action create(action<> returns any iterator) returns action<IObserver> returns ISubscription {
		return FromIteratorOnConnection(iterator).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		// Must create subscription before calling ay next, error, complete
		ISubscription subscription := Subscription.create(subscriber).asISubscription();
		subscriber.onPull := FromIteratorOnPull.create(iterator, subscriber);
		return subscription;
	}
}