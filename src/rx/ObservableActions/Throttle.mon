package com.industry.rx_epl;

using com.apama.exceptions.Exception;

event ThrottleSubscriber {
	IObserver subscriber;
	float throttleDuration;
	boolean canSendValue;
	boolean sendFirst; // false = sendLast
	any currentValue;
	listener onWaitListener;
	
	static action create(IObserver subscriber, float throttleDuration, boolean sendFirst) returns IObserver {
		ThrottleSubscriber m := ThrottleSubscriber(subscriber, throttleDuration, true, sendFirst, new any, new listener);
		return IObserverBuilder.create(subscriber.createUpstream()).onNext(m.next).onComplete(m.complete).build();
	}
	
	action next(any value) {
		currentValue := value;
		if canSendValue {
			canSendValue := false;
			if sendFirst {
				subscriber.next(value);
			}
			onWaitListener := on wait(Utils.waitJustUnder(throttleDuration)) {
				canSendValue := true;
				if not sendFirst and subscriber.subscribed() {
					ifpresent currentValue {
						subscriber.next(currentValue);
						currentValue := new any;
					}
				}
			}
		}
	}
	
	action complete() {
		onWaitListener.quit();
		if not sendFirst {
			ifpresent currentValue {
				subscriber.next(currentValue);
				currentValue := new any;
			}
		}
		subscriber.complete();
	}
}

event ThrottleOnConnection {
	action<IObserver> returns ISubscription parentOnConnection;
	float throttleDuration;
	boolean sendFirst;
	
	static action create(action<IObserver> returns ISubscription parentOnConnection, float throttleDuration, boolean sendFirst) returns action<IObserver> returns ISubscription {
		return ThrottleOnConnection(parentOnConnection, throttleDuration, sendFirst).onConnection;
	}
	
	action onConnection(IObserver subscriber) returns ISubscription {
		return parentOnConnection(ThrottleSubscriber.create(subscriber, throttleDuration, sendFirst));
	}
}